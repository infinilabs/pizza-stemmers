//! Generated by Snowball 2.2.0 - https://snowballstem.org/

#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(unused_mut)]
#![allow(unused_parens)]
#![allow(unused_variables)]
use super::super::among::Among;
use super::super::env::SnowballEnv;

static A_0: &'static [Among<Context>; 62] = &[
    Among("abator", -1, -1, None),
    Among("absolut", -1, -1, None),
    Among("acoper", -1, -1, None),
    Among("adjectiv", -1, -1, None),
    Among("ambulant", -1, -1, None),
    Among("antonim", -1, -1, None),
    Among("aparat", -1, -1, None),
    Among("ar\u{0103}t", -1, -1, None),
    Among("atroce", -1, -1, None),
    Among("autor", -1, -1, None),
    Among("bine", -1, -1, None),
    Among("canal", -1, -1, None),
    Among("caracter", -1, -1, None),
    Among("cercel", -1, -1, None),
    Among("complet", -1, -1, None),
    Among("conjunctiv", -1, -1, None),
    Among("coral", -1, -1, None),
    Among("critic", -1, -1, None),
    Among("dantel", -1, -1, None),
    Among("debit", -1, -1, None),
    Among("debut", -1, -1, None),
    Among("decal", -1, -1, None),
    Among("decan", -1, -1, None),
    Among("declar", -1, -1, None),
    Among("descoper", -1, -1, None),
    Among("exprim", -1, -1, None),
    Among("feroce", -1, -1, None),
    Among("final", -1, -1, None),
    Among("infinitiv", -1, -1, None),
    Among("marar", -1, -1, None),
    Among("miros", -1, -1, None),
    Among("model", -1, -1, None),
    Among("moral", -1, -1, None),
    Among("numer", -1, -1, None),
    Among("nuvel", -1, -1, None),
    Among("optim", -1, -1, None),
    Among("orator", -1, -1, None),
    Among("oribil", -1, -1, None),
    Among("papagal", -1, -1, None),
    Among("paravan", -1, -1, None),
    Among("polonic", -1, -1, None),
    Among("pozitiv", -1, -1, None),
    Among("prim", -1, -1, None),
    Among("probabil", -1, -1, None),
    Among("recidiv", -1, -1, None),
    Among("savant", -1, -1, None),
    Among("simultan", -1, -1, None),
    Among("sinonim", -1, -1, None),
    Among("social", -1, -1, None),
    Among("special", -1, -1, None),
    Among("specific", -1, -1, None),
    Among("subjonctiv", -1, -1, None),
    Among("substantiv", -1, -1, None),
    Among("sufer", -1, -1, None),
    Among("suf\u{0103}r", -1, -1, None),
    Among("tiner", -1, -1, None),
    Among("tiran", -1, -1, None),
    Among("tractor", -1, -1, None),
    Among("tutel", -1, -1, None),
    Among("ultim", -1, -1, None),
    Among("victim", -1, -1, None),
    Among("voinic", -1, -1, None),
];

static A_1: &'static [Among<Context>; 62] = &[
    Among("acest", -1, -1, None),
    Among("afar\u{0103}", -1, -1, None),
    Among("aici", -1, -1, None),
    Among("altfel", -1, -1, None),
    Among("altminteri", -1, -1, None),
    Among("antonim", -1, -1, None),
    Among("apoi", -1, -1, None),
    Among("aproape", -1, -1, None),
    Among("asemenea", -1, -1, None),
    Among("astfel", -1, -1, None),
    Among("asupra", -1, -1, None),
    Among("atroce", -1, -1, None),
    Among("baremi", -1, -1, None),
    Among("bine", -1, -1, None),
    Among("care", -1, -1, None),
    Among("cea", -1, 1, None),
    Among("cei", -1, 1, None),
    Among("cel", -1, 1, None),
    Among("celei", 17, 1, None),
    Among("celor", 17, 1, None),
    Among("celui", 17, 1, None),
    Among("cine", -1, -1, None),
    Among("cui", -1, -1, None),
    Among("c\u{0103}tre", -1, -1, None),
    Among("deasupra", -1, -1, None),
    Among("departe", -1, -1, None),
    Among("deseori", -1, -1, None),
    Among("despre", -1, -1, None),
    Among("destul", -1, -1, None),
    Among("devreme", -1, -1, None),
    Among("dinspre", -1, -1, None),
    Among("dintre", -1, -1, None),
    Among("dup\u{0103}", -1, -1, None),
    Among("exprim", -1, -1, None),
    Among("extrem", -1, -1, None),
    Among("feroce", -1, -1, None),
    Among("fonem", -1, -1, None),
    Among("imi", -1, -1, None),
    Among("i\u{015F}i", -1, -1, None),
    Among("i\u{0163}i", -1, -1, None),
    Among("mai", -1, -1, None),
    Among("musai", -1, -1, None),
    Among("nici", -1, -1, None),
    Among("noi", -1, -1, None),
    Among("numai", -1, -1, None),
    Among("optim", -1, -1, None),
    Among("ori", -1, -1, None),
    Among("pentru", -1, -1, None),
    Among("poem", -1, -1, None),
    Among("prim", -1, -1, None),
    Among("printre", -1, -1, None),
    Among("p\u{00E2}n\u{0103}", -1, -1, None),
    Among("sau", -1, -1, None),
    Among("sinonim", -1, -1, None),
    Among("spre", -1, -1, None),
    Among("suprem", -1, -1, None),
    Among("ultim", -1, -1, None),
    Among("uneori", -1, -1, None),
    Among("victim", -1, -1, None),
    Among("voi", -1, -1, None),
    Among("\u{00EE}ntre", -1, -1, None),
    Among("\u{00EE}nt\u{00E2}i", -1, -1, None),
];

static A_2: &'static [Among<Context>; 18] = &[
    Among("a", -1, 1, None),
    Among("e", -1, 1, None),
    Among("le", 1, 2, None),
    Among("ele", 2, 1, None),
    Among("ile", 2, 1, None),
    Among("urile", 4, 1, None),
    Among("i", -1, 1, None),
    Among("ei", 6, 1, None),
    Among("ii", 6, 1, None),
    Among("uri", 6, 1, None),
    Among("lui", 6, 1, None),
    Among("ului", 10, 1, None),
    Among("ul", -1, 1, None),
    Among("lor", -1, 1, None),
    Among("elor", 13, 1, None),
    Among("ilor", 13, 1, None),
    Among("urilor", 15, 1, None),
    Among("\u{0103}", -1, 1, None),
];

static A_3: &'static [Among<Context>; 14] = &[
    Among("esc", -1, 4, None),
    Among("ime", -1, 4, None),
    Among("abil", -1, 3, None),
    Among("ibil", -1, 3, None),
    Among("ism", -1, 1, None),
    Among("ar", -1, 2, None),
    Among("toar", 5, 3, None),
    Among("tor", -1, 3, None),
    Among("\u{0103}r", -1, 2, None),
    Among("ant", -1, 2, None),
    Among("ist", -1, 1, None),
    Among("i\u{015F}t", -1, 1, None),
    Among("iz", -1, 2, None),
    Among("n\u{0163}", -1, 5, None),
];

static A_4: &'static [Among<Context>; 32] = &[
    Among("ac", -1, 1, None),
    Among("ic", -1, 4, None),
    Among("uc", -1, 3, None),
    Among("anie", -1, 2, None),
    Among("oi", -1, 3, None),
    Among("aj", -1, 1, None),
    Among("al", -1, 7, None),
    Among("eal", 6, 2, None),
    Among("el", -1, 3, None),
    Among("icel", 8, 2, None),
    Among("im", -1, 1, None),
    Among("an", -1, 1, None),
    Among("ean", 11, 7, None),
    Among("ar", -1, 1, None),
    Among("\u{015F}oar", 13, 8, None),
    Among("er", -1, 5, None),
    Among("ir", -1, 1, None),
    Among("\u{015F}or", -1, 8, None),
    Among("\u{0103}r", -1, 1, None),
    Among("oas", -1, 6, None),
    Among("os", -1, 6, None),
    Among("\u{0103}tat", -1, 2, None),
    Among("ant", -1, 7, None),
    Among("giu", -1, 2, None),
    Among("iv", -1, 1, None),
    Among("liv", 24, 7, None),
    Among("iz", -1, 1, None),
    Among("i\u{015F}", -1, 1, None),
    Among("o\u{015F}", -1, 6, None),
    Among("u\u{015F}", -1, 3, None),
    Among("ulte\u{0163}", -1, 3, None),
    Among("u\u{0163}", -1, 3, None),
];

static A_5: &'static [Among<Context>; 32] = &[
    Among("ea", -1, 1, None),
    Among("eaza", -1, 1, None),
    Among("esc", -1, 1, None),
    Among("ind", -1, 1, None),
    Among("\u{00E2}nd", -1, 1, None),
    Among("\u{00EE}nd", -1, 1, None),
    Among("se", -1, 1, None),
    Among("e\u{015F}te", -1, 1, None),
    Among("ai", -1, 1, None),
    Among("sei", -1, 1, None),
    Among("e\u{015F}ti", -1, 1, None),
    Among("ezi", -1, 1, None),
    Among("a\u{015F}i", -1, 1, None),
    Among("se\u{015F}i", -1, 1, None),
    Among("i\u{015F}i", -1, 1, None),
    Among("\u{0163}i", -1, 2, None),
    Among("i\u{0163}i", 15, 1, None),
    Among("ser\u{0103}\u{0163}i", 15, 1, None),
    Among("am", -1, 1, None),
    Among("em", -1, 1, None),
    Among("im", -1, 1, None),
    Among("\u{0103}m", -1, 1, None),
    Among("r\u{0103}m", 21, 1, None),
    Among("ser\u{0103}m", 22, 1, None),
    Among("u", -1, 1, None),
    Among("au", 24, 1, None),
    Among("ez", -1, 1, None),
    Among("easc\u{0103}", -1, 1, None),
    Among("r\u{0103}", -1, 1, None),
    Among("ser\u{0103}", 28, 1, None),
    Among("z\u{0103}", -1, 1, None),
    Among("eaz\u{0103}", 30, 1, None),
];

static A_6: &'static [Among<Context>; 11] = &[
    Among("a", -1, 1, None),
    Among("e", -1, 1, None),
    Among("i", -1, 1, None),
    Among("at", -1, 2, None),
    Among("it", -1, 2, None),
    Among("ut", -1, 2, None),
    Among("u", -1, 1, None),
    Among("\u{0103}", -1, 1, None),
    Among("a\u{0163}", -1, 2, None),
    Among("i\u{0163}", -1, 2, None),
    Among("u\u{0163}", -1, 2, None),
];

static G_v: &'static [u8; 21] = &[
    17, 65, 16, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 32, 0, 0, 4,
];

#[derive(Clone)]
struct Context {
    i_p2: i32,
    i_p1: i32,
}

fn r_mark_regions(env: &mut SnowballEnv, context: &mut Context) -> bool {
    context.i_p1 = env.limit;
    context.i_p2 = env.limit;
    let v_1 = env.cursor;
    'lab0: loop {
        'lab1: loop {
            let v_2 = env.cursor;
            'lab2: loop {
                if env.find_among(A_0, context) == 0 {
                    break 'lab2;
                }
                break 'lab1;
            }
            env.cursor = v_2;
            'golab3: loop {
                'lab4: loop {
                    if !env.in_grouping(G_v, 97, 259) {
                        break 'lab4;
                    }
                    break 'golab3;
                }
                if env.cursor >= env.limit {
                    break 'lab0;
                }
                env.next_char();
            }
            'golab5: loop {
                'lab6: loop {
                    if !env.out_grouping(G_v, 97, 259) {
                        break 'lab6;
                    }
                    break 'golab5;
                }
                if env.cursor >= env.limit {
                    break 'lab0;
                }
                env.next_char();
            }
            break 'lab1;
        }
        context.i_p1 = env.cursor;
        'golab7: loop {
            'lab8: loop {
                if !env.in_grouping(G_v, 97, 259) {
                    break 'lab8;
                }
                break 'golab7;
            }
            if env.cursor >= env.limit {
                break 'lab0;
            }
            env.next_char();
        }
        'golab9: loop {
            'lab10: loop {
                if !env.out_grouping(G_v, 97, 259) {
                    break 'lab10;
                }
                break 'golab9;
            }
            if env.cursor >= env.limit {
                break 'lab0;
            }
            env.next_char();
        }
        context.i_p2 = env.cursor;
        break 'lab0;
    }
    env.cursor = v_1;
    return true;
}

fn r_exception1(env: &mut SnowballEnv, context: &mut Context) -> bool {
    let mut among_var;
    env.bra = env.cursor;
    among_var = env.find_among(A_1, context);
    if among_var == 0 {
        return false;
    }
    env.ket = env.cursor;
    if env.cursor < env.limit {
        return false;
    }
    match among_var {
        1 => {
            if !env.slice_from("ce") {
                return false;
            }
        }
        _ => (),
    }
    return true;
}

fn r_R1(env: &mut SnowballEnv, context: &mut Context) -> bool {
    return context.i_p1 <= env.cursor;
}

fn r_R2(env: &mut SnowballEnv, context: &mut Context) -> bool {
    return context.i_p2 <= env.cursor;
}

fn r_morhological_suffixes(env: &mut SnowballEnv, context: &mut Context) -> bool {
    let mut among_var;
    env.ket = env.cursor;
    among_var = env.find_among_b(A_2, context);
    if among_var == 0 {
        return false;
    }
    env.bra = env.cursor;
    match among_var {
        1 => {
            if !env.slice_del() {
                return false;
            }
        }
        2 => 'lab0: loop {
            let v_1 = env.limit - env.cursor;
            'lab1: loop {
                'lab2: loop {
                    let v_2 = env.limit - env.cursor;
                    'lab3: loop {
                        if !env.eq_s_b(&"a") {
                            break 'lab3;
                        }
                        break 'lab2;
                    }
                    env.cursor = env.limit - v_2;
                    if !env.eq_s_b(&"o") {
                        break 'lab1;
                    }
                    break 'lab2;
                }
                if !env.slice_from("l") {
                    return false;
                }
                break 'lab0;
            }
            env.cursor = env.limit - v_1;
            if !env.slice_del() {
                return false;
            }
            break 'lab0;
        },
        _ => (),
    }
    return true;
}

fn r_deriv_suffixes1(env: &mut SnowballEnv, context: &mut Context) -> bool {
    let mut among_var;
    env.ket = env.cursor;
    among_var = env.find_among_b(A_3, context);
    if among_var == 0 {
        return false;
    }
    env.bra = env.cursor;
    match among_var {
        1 => {
            'lab0: loop {
                'lab1: loop {
                    if !r_R2(env, context) {
                        break 'lab1;
                    }
                    break 'lab0;
                }
                if !r_R1(env, context) {
                    return false;
                }
                break 'lab0;
            }
            if !env.out_grouping_b(G_v, 97, 259) {
                return false;
            }
            if !env.slice_del() {
                return false;
            }
        }
        2 => {
            if !r_R2(env, context) {
                return false;
            }
            if !env.out_grouping_b(G_v, 97, 259) {
                return false;
            }
            if !env.slice_del() {
                return false;
            }
        }
        3 => {
            'lab2: loop {
                'lab3: loop {
                    if !r_R1(env, context) {
                        break 'lab3;
                    }
                    break 'lab2;
                }
                if !r_R2(env, context) {
                    return false;
                }
                break 'lab2;
            }
            if !env.slice_del() {
                return false;
            }
        }
        4 => {
            if !env.slice_del() {
                return false;
            }
        }
        5 => {
            if !r_R2(env, context) {
                return false;
            }
            if !env.slice_from("nt") {
                return false;
            }
        }
        _ => (),
    }
    return true;
}

fn r_deriv_suffixes2(env: &mut SnowballEnv, context: &mut Context) -> bool {
    let mut among_var;
    env.ket = env.cursor;
    among_var = env.find_among_b(A_4, context);
    if among_var == 0 {
        return false;
    }
    env.bra = env.cursor;
    match among_var {
        1 => {
            'lab0: loop {
                'lab1: loop {
                    if !r_R1(env, context) {
                        break 'lab1;
                    }
                    break 'lab0;
                }
                if !r_R2(env, context) {
                    return false;
                }
                break 'lab0;
            }
            if !env.out_grouping_b(G_v, 97, 259) {
                return false;
            }
            if !env.slice_del() {
                return false;
            }
        }
        2 => {
            if !r_R2(env, context) {
                return false;
            }
            if !env.out_grouping_b(G_v, 97, 259) {
                return false;
            }
            if !env.slice_del() {
                return false;
            }
        }
        3 => {
            if !r_R1(env, context) {
                return false;
            }
            if !env.slice_del() {
                return false;
            }
        }
        4 => {
            'lab2: loop {
                'lab3: loop {
                    if !r_R2(env, context) {
                        break 'lab3;
                    }
                    break 'lab2;
                }
                if !r_R1(env, context) {
                    return false;
                }
                break 'lab2;
            }
            if !env.slice_del() {
                return false;
            }
        }
        5 => {
            'lab4: loop {
                'lab5: loop {
                    if !r_R1(env, context) {
                        break 'lab5;
                    }
                    break 'lab4;
                }
                if !r_R2(env, context) {
                    return false;
                }
                break 'lab4;
            }
            'lab6: loop {
                let v_4 = env.limit - env.cursor;
                'lab7: loop {
                    if !env.out_grouping_b(G_v, 97, 259) {
                        break 'lab7;
                    }
                    break 'lab6;
                }
                env.cursor = env.limit - v_4;
                if !env.eq_s_b(&"i") {
                    return false;
                }
                break 'lab6;
            }
            if !env.slice_del() {
                return false;
            }
        }
        6 => {
            'lab8: loop {
                let v_5 = env.limit - env.cursor;
                'lab9: loop {
                    if !env.eq_s_b(&"u") {
                        break 'lab9;
                    }
                    break 'lab8;
                }
                env.cursor = env.limit - v_5;
                'lab10: loop {
                    if !env.eq_s_b(&"i") {
                        break 'lab10;
                    }
                    break 'lab8;
                }
                env.cursor = env.limit - v_5;
                'lab11: loop {
                    if !env.eq_s_b(&"j") {
                        break 'lab11;
                    }
                    break 'lab8;
                }
                env.cursor = env.limit - v_5;
                'lab12: loop {
                    if !env.eq_s_b(&"r") {
                        break 'lab12;
                    }
                    break 'lab8;
                }
                env.cursor = env.limit - v_5;
                if !env.eq_s_b(&"p") {
                    return false;
                }
                break 'lab8;
            }
            if !r_R1(env, context) {
                return false;
            }
            if !env.slice_del() {
                return false;
            }
        }
        7 => {
            'lab13: loop {
                'lab14: loop {
                    if !r_R1(env, context) {
                        break 'lab14;
                    }
                    break 'lab13;
                }
                if !r_R2(env, context) {
                    return false;
                }
                break 'lab13;
            }
            if !env.slice_del() {
                return false;
            }
        }
        8 => {
            'lab15: loop {
                'lab16: loop {
                    if !r_R1(env, context) {
                        break 'lab16;
                    }
                    break 'lab15;
                }
                if !r_R2(env, context) {
                    return false;
                }
                break 'lab15;
            }
            if !env.in_grouping_b(G_v, 97, 259) {
                return false;
            }
            if !env.slice_del() {
                return false;
            }
        }
        _ => (),
    }
    return true;
}

fn r_verb_suffix(env: &mut SnowballEnv, context: &mut Context) -> bool {
    let mut among_var;
    env.ket = env.cursor;
    among_var = env.find_among_b(A_5, context);
    if among_var == 0 {
        return false;
    }
    env.bra = env.cursor;
    match among_var {
        1 => {
            'lab0: loop {
                'lab1: loop {
                    if !r_R1(env, context) {
                        break 'lab1;
                    }
                    break 'lab0;
                }
                if !r_R2(env, context) {
                    return false;
                }
                break 'lab0;
            }
            if !env.slice_del() {
                return false;
            }
        }
        2 => {
            if !r_R1(env, context) {
                return false;
            }
            if !env.eq_s_b(&"a") {
                return false;
            }
            if !env.eq_s_b(&"e") {
                return false;
            }
            if !env.eq_s_b(&"i") {
                return false;
            }
            if !env.eq_s_b(&"u") {
                return false;
            }
            if !env.slice_del() {
                return false;
            }
        }
        _ => (),
    }
    return true;
}

fn r_residual_suffix(env: &mut SnowballEnv, context: &mut Context) -> bool {
    let mut among_var;
    env.ket = env.cursor;
    among_var = env.find_among_b(A_6, context);
    if among_var == 0 {
        return false;
    }
    env.bra = env.cursor;
    match among_var {
        1 => {
            'lab0: loop {
                'lab1: loop {
                    if !r_R1(env, context) {
                        break 'lab1;
                    }
                    break 'lab0;
                }
                if !r_R2(env, context) {
                    return false;
                }
                break 'lab0;
            }
            if !env.out_grouping_b(G_v, 97, 259) {
                return false;
            }
            if !env.slice_del() {
                return false;
            }
        }
        2 => {
            'lab2: loop {
                'lab3: loop {
                    if !r_R2(env, context) {
                        break 'lab3;
                    }
                    break 'lab2;
                }
                if !r_R1(env, context) {
                    return false;
                }
                break 'lab2;
            }
            if !env.slice_del() {
                return false;
            }
        }
        _ => (),
    }
    return true;
}

pub fn stem(env: &mut SnowballEnv) -> bool {
    let mut context = &mut Context { i_p2: 0, i_p1: 0 };
    'lab0: loop {
        let v_1 = env.cursor;
        'lab1: loop {
            if !r_exception1(env, context) {
                break 'lab1;
            }
            break 'lab0;
        }
        env.cursor = v_1;
        'lab2: loop {
            let v_2 = env.cursor;
            'lab3: loop {
                if !env.hop(3) {
                    break 'lab3;
                }
                break 'lab2;
            }
            env.cursor = v_2;
            break 'lab0;
        }
        env.cursor = v_1;
        r_mark_regions(env, context);
        env.limit_backward = env.cursor;
        env.cursor = env.limit;
        let v_4 = env.limit - env.cursor;
        'lab4: loop {
            'lab5: loop {
                let v_5 = env.limit - env.cursor;
                'lab6: loop {
                    if !r_verb_suffix(env, context) {
                        break 'lab6;
                    }
                    break 'lab5;
                }
                env.cursor = env.limit - v_5;
                if !r_morhological_suffixes(env, context) {
                    break 'lab4;
                }
                break 'lab5;
            }
            break 'lab4;
        }
        env.cursor = env.limit - v_4;
        let v_6 = env.limit - env.cursor;
        r_deriv_suffixes1(env, context);
        env.cursor = env.limit - v_6;
        let v_7 = env.limit - env.cursor;
        r_deriv_suffixes2(env, context);
        env.cursor = env.limit - v_7;
        if !r_residual_suffix(env, context) {
            return false;
        }
        env.cursor = env.limit_backward;
        break 'lab0;
    }
    return true;
}
