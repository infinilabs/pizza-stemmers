//! Generated by Snowball 2.2.0 - https://snowballstem.org/

#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(unused_mut)]
#![allow(unused_parens)]
#![allow(unused_variables)]
use super::super::among::Among;
use super::super::env::SnowballEnv;

static A_0: &'static [Among<Context>; 14] = &[
    Among("ind", -1, 1, None),
    Among("\u{00E2}nd", -1, 1, None),
    Among("are", -1, 1, None),
    Among("ere", -1, 1, None),
    Among("ire", -1, 1, None),
    Among("\u{00E2}re", -1, 1, None),
    Among("s", -1, 1, None),
    Among("t", -1, 1, None),
    Among("at", 7, 1, None),
    Among("it", 7, 1, None),
    Among("ut", 7, 1, None),
    Among("\u{00E2}t", 7, 1, None),
    Among("indu", -1, 1, None),
    Among("\u{00E2}ndu", -1, 1, None),
];

static A_1: &'static [Among<Context>; 84] = &[
    Among("ea", -1, 1, None),
    Among("ia", -1, 1, None),
    Among("esc", -1, 1, None),
    Among("\u{0103}sc", -1, 1, None),
    Among("se", -1, 2, None),
    Among("ase", 4, 1, None),
    Among("sese", 4, 2, None),
    Among("ise", 4, 1, None),
    Among("use", 4, 1, None),
    Among("\u{00E2}se", 4, 1, None),
    Among("e\u{015F}te", -1, 1, None),
    Among("\u{0103}\u{015F}te", -1, 1, None),
    Among("ai", -1, 1, None),
    Among("eai", 12, 1, None),
    Among("iai", 12, 1, None),
    Among("sei", -1, 2, None),
    Among("e\u{015F}ti", -1, 1, None),
    Among("\u{0103}\u{015F}ti", -1, 1, None),
    Among("ui", -1, 3, None),
    Among("ezi", -1, 1, None),
    Among("a\u{015F}i", -1, 1, None),
    Among("se\u{015F}i", -1, 2, None),
    Among("ase\u{015F}i", 21, 1, None),
    Among("sese\u{015F}i", 21, 2, None),
    Among("ise\u{015F}i", 21, 1, None),
    Among("use\u{015F}i", 21, 1, None),
    Among("\u{00E2}se\u{015F}i", 21, 1, None),
    Among("i\u{015F}i", -1, 1, None),
    Among("u\u{015F}i", -1, 1, None),
    Among("\u{00E2}\u{015F}i", -1, 1, None),
    Among("\u{00E2}i", -1, 1, None),
    Among("a\u{0163}i", -1, 2, None),
    Among("ea\u{0163}i", 31, 1, None),
    Among("ia\u{0163}i", 31, 1, None),
    Among("e\u{0163}i", -1, 2, None),
    Among("i\u{0163}i", -1, 2, None),
    Among("ar\u{0103}\u{0163}i", -1, 1, None),
    Among("ser\u{0103}\u{0163}i", -1, 2, None),
    Among("aser\u{0103}\u{0163}i", 37, 1, None),
    Among("seser\u{0103}\u{0163}i", 37, 2, None),
    Among("iser\u{0103}\u{0163}i", 37, 1, None),
    Among("user\u{0103}\u{0163}i", 37, 1, None),
    Among("\u{00E2}ser\u{0103}\u{0163}i", 37, 1, None),
    Among("ir\u{0103}\u{0163}i", -1, 1, None),
    Among("ur\u{0103}\u{0163}i", -1, 1, None),
    Among("\u{00E2}r\u{0103}\u{0163}i", -1, 1, None),
    Among("\u{00E2}\u{0163}i", -1, 2, None),
    Among("am", -1, 1, None),
    Among("eam", 47, 1, None),
    Among("iam", 47, 1, None),
    Among("em", -1, 2, None),
    Among("asem", 50, 1, None),
    Among("sesem", 50, 2, None),
    Among("isem", 50, 1, None),
    Among("usem", 50, 1, None),
    Among("\u{00E2}sem", 50, 1, None),
    Among("im", -1, 2, None),
    Among("\u{0103}m", -1, 2, None),
    Among("ar\u{0103}m", 57, 1, None),
    Among("ser\u{0103}m", 57, 2, None),
    Among("aser\u{0103}m", 59, 1, None),
    Among("seser\u{0103}m", 59, 2, None),
    Among("iser\u{0103}m", 59, 1, None),
    Among("user\u{0103}m", 59, 1, None),
    Among("\u{00E2}ser\u{0103}m", 59, 1, None),
    Among("ir\u{0103}m", 57, 1, None),
    Among("ur\u{0103}m", 57, 1, None),
    Among("\u{00E2}r\u{0103}m", 57, 1, None),
    Among("\u{00E2}m", -1, 2, None),
    Among("au", -1, 1, None),
    Among("eau", 69, 1, None),
    Among("iau", 69, 1, None),
    Among("ez", -1, 1, None),
    Among("ar\u{0103}", -1, 1, None),
    Among("ser\u{0103}", -1, 2, None),
    Among("aser\u{0103}", 74, 1, None),
    Among("seser\u{0103}", 74, 2, None),
    Among("iser\u{0103}", 74, 1, None),
    Among("user\u{0103}", 74, 1, None),
    Among("\u{00E2}ser\u{0103}", 74, 1, None),
    Among("ir\u{0103}", -1, 1, None),
    Among("ur\u{0103}", -1, 1, None),
    Among("\u{00E2}r\u{0103}", -1, 1, None),
    Among("eaz\u{0103}", -1, 1, None),
];

static A_2: &'static [Among<Context>; 12] = &[
    Among("a", -1, 1, None),
    Among("ia", 0, 1, None),
    Among("ua", 0, 1, None),
    Among("eaua", 2, 1, None),
    Among("le", -1, 2, None),
    Among("ule", 4, 1, None),
    Among("i", -1, 3, None),
    Among("lui", 6, 1, None),
    Among("l", -1, 1, None),
    Among("ul", 8, 1, None),
    Among("o", -1, 1, None),
    Among("lor", -1, 1, None),
];

static A_3: &'static [Among<Context>; 4] = &[
    Among("e", -1, 1, None),
    Among("le", 0, 2, None),
    Among("i", -1, 1, None),
    Among("uri", 2, 1, None),
];

static A_4: &'static [Among<Context>; 7] = &[
    Among("a", -1, 1, None),
    Among("e", -1, 1, None),
    Among("i", -1, 1, None),
    Among("u", -1, 1, None),
    Among("\u{0103}", -1, 1, None),
    Among("\u{00E2}", -1, 1, None),
    Among("\u{00EE}", -1, 1, None),
];

static G_v: &'static [u8; 21] = &[
    17, 65, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 32, 0, 0, 4,
];

#[derive(Clone)]
struct Context {
    i_x: i32,
    i_p1: i32,
    i_pV: i32,
}

fn r_mark_regions(env: &mut SnowballEnv, context: &mut Context) -> bool {
    context.i_pV = env.limit;
    context.i_p1 = env.limit;
    let v_1 = env.cursor;
    if !env.hop(3) {
        return false;
    }
    context.i_x = env.cursor;
    env.cursor = v_1;
    'golab0: loop {
        'lab1: loop {
            if !env.in_grouping(G_v, 97, 259) {
                break 'lab1;
            }
            break 'golab0;
        }
        if env.cursor >= env.limit {
            return false;
        }
        env.next_char();
    }
    context.i_pV = env.cursor;
    'lab2: loop {
        if context.i_pV >= context.i_x {
            break 'lab2;
        }
        context.i_pV = context.i_x;
        break 'lab2;
    }
    'golab3: loop {
        'lab4: loop {
            if !env.out_grouping(G_v, 97, 259) {
                break 'lab4;
            }
            break 'golab3;
        }
        if env.cursor >= env.limit {
            return false;
        }
        env.next_char();
    }
    context.i_p1 = env.cursor;
    'lab5: loop {
        if context.i_p1 >= context.i_x {
            break 'lab5;
        }
        context.i_p1 = context.i_x;
        break 'lab5;
    }
    return true;
}

fn r_RV(env: &mut SnowballEnv, context: &mut Context) -> bool {
    return context.i_pV <= env.cursor;
}

fn r_R1(env: &mut SnowballEnv, context: &mut Context) -> bool {
    return context.i_p1 <= env.cursor;
}

fn r_verb_non_personal_moods(env: &mut SnowballEnv, context: &mut Context) -> bool {
    env.ket = env.cursor;
    if env.find_among_b(A_0, context) == 0 {
        return false;
    }
    env.bra = env.cursor;
    if !r_R1(env, context) {
        return false;
    }
    if !env.slice_del() {
        return false;
    }
    return true;
}

fn r_verb_conjugation(env: &mut SnowballEnv, context: &mut Context) -> bool {
    let mut among_var;
    if env.cursor < context.i_p1 {
        return false;
    }
    let v_2 = env.limit_backward;
    env.limit_backward = context.i_p1;
    env.ket = env.cursor;
    among_var = env.find_among_b(A_1, context);
    if among_var == 0 {
        env.limit_backward = v_2;
        return false;
    }
    env.bra = env.cursor;
    env.limit_backward = v_2;
    match among_var {
        1 => {
            let v_3 = env.limit - env.cursor;
            'lab0: loop {
                let v_4 = env.limit - env.cursor;
                'lab1: loop {
                    if !env.out_grouping_b(G_v, 97, 259) {
                        break 'lab1;
                    }
                    break 'lab0;
                }
                env.cursor = env.limit - v_4;
                if !env.eq_s_b(&"u") {
                    return false;
                }
                break 'lab0;
            }
            env.cursor = env.limit - v_3;
            if !env.slice_del() {
                return false;
            }
        }
        2 => {
            if !env.slice_del() {
                return false;
            }
        }
        3 => {
            let v_5 = env.limit - env.cursor;
            if !env.out_grouping_b(G_v, 97, 259) {
                return false;
            }
            env.cursor = env.limit - v_5;
            let v_6 = env.limit - env.cursor;
            'lab2: loop {
                if !env.eq_s_b(&"l") {
                    break 'lab2;
                }
                return false;
            }
            env.cursor = env.limit - v_6;
            if !env.slice_del() {
                return false;
            }
        }
        _ => (),
    }
    return true;
}

fn r_definite_article(env: &mut SnowballEnv, context: &mut Context) -> bool {
    let mut among_var;
    if env.cursor < context.i_pV {
        return false;
    }
    let v_2 = env.limit_backward;
    env.limit_backward = context.i_pV;
    env.ket = env.cursor;
    among_var = env.find_among_b(A_2, context);
    if among_var == 0 {
        env.limit_backward = v_2;
        return false;
    }
    env.bra = env.cursor;
    env.limit_backward = v_2;
    match among_var {
        1 => {
            if !env.slice_del() {
                return false;
            }
        }
        2 => {
            let v_3 = env.limit - env.cursor;
            if !env.in_grouping_b(G_v, 97, 259) {
                return false;
            }
            env.cursor = env.limit - v_3;
            if !env.slice_del() {
                return false;
            }
        }
        3 => {
            let v_4 = env.limit - env.cursor;
            'lab0: loop {
                if !env.eq_s_b(&"ur") {
                    break 'lab0;
                }
                return false;
            }
            env.cursor = env.limit - v_4;
            if !env.slice_del() {
                return false;
            }
        }
        _ => (),
    }
    return true;
}

fn r_number_plural(env: &mut SnowballEnv, context: &mut Context) -> bool {
    let mut among_var;
    if env.cursor < context.i_pV {
        return false;
    }
    let v_2 = env.limit_backward;
    env.limit_backward = context.i_pV;
    env.ket = env.cursor;
    among_var = env.find_among_b(A_3, context);
    if among_var == 0 {
        env.limit_backward = v_2;
        return false;
    }
    env.bra = env.cursor;
    env.limit_backward = v_2;
    match among_var {
        1 => {
            if !env.slice_del() {
                return false;
            }
        }
        2 => {
            let v_3 = env.limit - env.cursor;
            if !env.in_grouping_b(G_v, 97, 259) {
                return false;
            }
            env.cursor = env.limit - v_3;
            if !env.slice_del() {
                return false;
            }
        }
        _ => (),
    }
    return true;
}

fn r_residual_suffix(env: &mut SnowballEnv, context: &mut Context) -> bool {
    env.ket = env.cursor;
    if env.find_among_b(A_4, context) == 0 {
        return false;
    }
    env.bra = env.cursor;
    if !r_RV(env, context) {
        return false;
    }
    if !env.slice_del() {
        return false;
    }
    return true;
}

pub fn stem(env: &mut SnowballEnv) -> bool {
    let mut context = &mut Context {
        i_x: 0,
        i_p1: 0,
        i_pV: 0,
    };
    let v_1 = env.cursor;
    r_mark_regions(env, context);
    env.cursor = v_1;
    env.limit_backward = env.cursor;
    env.cursor = env.limit;
    let v_2 = env.limit - env.cursor;
    'lab0: loop {
        'lab1: loop {
            let v_3 = env.limit - env.cursor;
            'lab2: loop {
                if !r_verb_non_personal_moods(env, context) {
                    break 'lab2;
                }
                break 'lab1;
            }
            env.cursor = env.limit - v_3;
            'lab3: loop {
                if !r_verb_conjugation(env, context) {
                    break 'lab3;
                }
                break 'lab1;
            }
            env.cursor = env.limit - v_3;
            let v_4 = env.limit - env.cursor;
            let v_5 = env.limit - env.cursor;
            'lab4: loop {
                if !r_definite_article(env, context) {
                    env.cursor = env.limit - v_5;
                    break 'lab4;
                }
                break 'lab4;
            }
            env.cursor = env.limit - v_4;
            if !r_number_plural(env, context) {
                break 'lab0;
            }
            break 'lab1;
        }
        break 'lab0;
    }
    env.cursor = env.limit - v_2;
    let v_6 = env.limit - env.cursor;
    r_residual_suffix(env, context);
    env.cursor = env.limit - v_6;
    env.cursor = env.limit_backward;
    return true;
}
